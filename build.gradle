buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.1'
    }
}

allprojects {
    apply plugin: 'java'

    ext {
        travisEnabled = System.getenv('TRAVIS') ? true : false
        travisTag = System.getenv('TRAVIS_TAG')
        travisBuildNumber = System.getenv('TRAVIS_BUILD_NUMBER')

        bintrayUser = System.getenv('BINTRAY_USER')
        bintrayApiKey = System.getenv('BINTRAY_API_KEY')
    }

    group 'com.inkycode.nexus'
    version 'local-development'
    if (project.travisEnabled) {
        version = project.travisTag ? project.travisTag : "development-${project.travisBuildNumber}"
    }
}

subprojects {
    apply plugin: 'maven'
    apply plugin: 'com.jfrog.bintray'

    repositories {
        jcenter()
    }

    dependencies {
        compile 'org.slf4j:slf4j-api:1.7.21'

        testCompile 'junit:junit:4.12'
    }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar, javadocJar
    }

    bintray {
        user = project.bintrayUser
        key = project.bintrayApiKey

        configurations = ['archives']

        dryRun = true
        publish = project.travisTag ? true : false

        pkg {
            repo = 'maven'
            name = project.group
            licenses = ['MIT']
            websiteUrl = 'https://github.com/inkycode/nexus'
            issueTrackerUrl = 'https://github.com/inkycode/nexus/issues'
            vcsUrl = 'https://github.com/inkycode/nexus.git'
            version {
                name = project.version
                released = new Date()
            }
        }
    }

    bintrayUpload.onlyIf { project.bintrayUser && project.bintrayApiKey }
}

// seperate subproject libs and copy them to root project build path
task libDist(dependsOn: subprojects.build) << {
    File libFolder = mkdir("${buildDir}/libDist/lib")
    File sourceFolder = mkdir("${buildDir}/libDist/sources")
    File javadocFolder = mkdir("${buildDir}/libDist/javadoc")

    subprojects.each {project ->
        project.tasks.withType(Jar).each {archiveTask ->
            if (archiveTask.classifier == "sources") {
                copy {
                    from archiveTask.archivePath
                    into sourceFolder
                }
            } else if(archiveTask.classifier == "javadoc"){
                copy {
                    from archiveTask.archivePath
                    into javadocFolder
                }
            } else{
                copy {
                    from archiveTask.archivePath
                    into libFolder
                }
            }
        }
    }
}

// create a zip containing all libs
task zipDist(type: Zip, dependsOn: libDist) {
    archiveName "${rootProject.name}-${project.version}.zip"

    into('/') {
         from {"${buildDir}/libDist"}
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.14'
}
